# -*- coding: utf-8 -*-
"""pitcher FIP & WAR.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1d4_xXEQAiwu8J8pDJtrHec3Vlyd2Ot1i
"""

!sudo apt-get install -y fonts-nanum
!sudo fc-cache -fv
!rm ~/.cache/matplotlib -rf

from matplotlib import rc
import platform
import matplotlib.pyplot as plt

if platform.system() == 'Windows':
    rc('font', family='Malgun Gothic')
elif platform.system() == 'Darwin': # Mac
    rc('font', family='AppleGothic')
else: #linux
    rc('font', family='NanumGothic')

plt.rcParams['axes.unicode_minus'] = False

import pandas as pd
import numpy as np
import seaborn as sns

df = pd.read_csv('/content/pitchers_stat_fin.csv')

df.columns

constant = 3.20

df['FIP'] = (13 * df['HR'] + 3 * (df['BB']) - 2 * df['SO']) / df['IP'] + constant

df1 = df[['선수명','연도','IP', 'HR', 'BB', 'SO', 'FIP','예측연봉','연차']]
df1

# df2020 = df1[df1['연도']==2020]
# df2020

import seaborn as sns

years = [2020, 2021, 2022, 2023]

plt.figure(figsize=(15, 12))

for year in years:
    plt.subplot(2, 2, years.index(year) + 1)
    year_data = df1[df1['연도'] == year]

    sns.scatterplot(x='FIP', y='예측연봉', data=year_data)
    sns.regplot(x='FIP', y='예측연봉', data=year_data, scatter=False, color='red')

    plt.title(f'FIP vs 후년 연봉 ({year})')
    plt.xlabel('FIP')
    plt.ylabel('후년연봉')

plt.tight_layout()
plt.show()

correlation = df1[['FIP', '예측연봉']].corr().iloc[0, 1]
print(f'FIP와 다음 해 연봉의 상관계수: {correlation:.2f}')

import statsmodels.api as sm

X = df1[['FIP']]
X = sm.add_constant(X)
y = df1['예측연봉']

model = sm.OLS(y, X).fit()

print(model.summary())

years = [2020, 2021, 2022, 2023]

plt.figure(figsize=(18, 12))

for i, year in enumerate(years):
    df_current = df1[df1['연도'] == year]

    X = df_current[['FIP', '연차']]
    X = sm.add_constant(X)  # 절편 추가
    y = df_current['예측연봉']

    model = sm.OLS(y, X).fit()

    print(f"회귀 분석 결과 ({year}):")
    print(model.summary())
    print("\n")

    plt.subplot(2, 4, i + 1)

    # FIP
    sns.scatterplot(x='FIP', y='예측연봉', data=df_current, label='Data')
    sns.regplot(x='FIP', y='예측연봉', data=df_current, scatter=False, color='red', label='FIP Reg. Line')
    plt.title(f'FIP vs 예측연봉 ({year})')
    plt.xlabel('FIP')
    plt.ylabel('예측연봉')

    # 연차
    plt.subplot(2, 4, i + 5)
    sns.scatterplot(x='연차', y='예측연봉', data=df_current, label='Data')
    sns.regplot(x='연차', y='예측연봉', data=df_current, scatter=False, color='blue', label='연차 Reg. Line')
    plt.title(f'연차 vs 예측연봉 ({year})')
    plt.xlabel('연차')
    plt.ylabel('예측연봉')

plt.tight_layout()
plt.show()

years = [2020, 2021, 2022, 2023]

plt.figure(figsize=(18,12))

for i, year in enumerate(years):
    df_current = df1[df1['연도'] == year]

    plt.subplot(2, 4, i+1)
    sns.scatterplot(x='FIP', y='예측연봉', data=df_current, label='Data')
    sns.regplot(x='FIP', y='예측연봉', data=df_current, scatter=False, color='red', label='FIP Reg. Line')
    plt.title(f'FIP vs 예측연봉 ({year})')
    plt.xlabel('FIP')
    plt.ylabel('예측연봉')

    # 연차 vs 예측연봉
    # plt.subplot(4, 2, i * 2 + 2)
    # sns.scatterplot(x='연차', y='예측연봉', data=df_current, label='Data')
    # sns.regplot(x='연차', y='예측연봉', data=df_current, scatter=False, color='blue', label='연차 Reg. Line')
    # plt.title(f'연차 vs 예측연봉 ({year})')
    # plt.xlabel('연차')
    # plt.ylabel('예측연봉')

plt.tight_layout()
plt.show()

"""최고연봉자 최저연봉자"""

df_2023 = df[df['연도'] == 2023][['선수명', '예측연봉']]
df_2020 = df[df['연도'] == 2020][['선수명', '현재연봉']]

df_combined = pd.merge(df_2023, df_2020, on='선수명', how='inner', suffixes=('_2023', '_2020'))

df_combined['연봉_차이'] = df_combined['예측연봉'] - df_combined['현재연봉']

df = pd.merge(df, df_combined[['선수명', '연봉_차이']], on='선수명', how='left')

print(df.columns)
print(df_2023.columns)
print(df_2020.columns)

# df2020 = df[df['연도']==2020]
# df2023 = df[df['연도']==2023]

# df['연봉_차이'] = df2023['예측연봉'] - df2020['현재연봉']

# df

# df2020 = df[df['연도']==2020]

df.describe()

# 연봉 차이 최저 및 최고값 계산
min_salary_player = df.loc[df['연봉_차이'].idxmin()]
max_salary_player = df.loc[df['연봉_차이'].idxmax()]

# 선수명
min_salary_name = min_salary_player['선수명']
max_salary_name = max_salary_player['선수명']

print(min_salary_name)
print(max_salary_name)

df_filtered = df[df['선수명'].isin([min_salary_name, max_salary_name])]

df_pivot = df_filtered.pivot_table(index='연도', columns='선수명', values='예측연봉')

plt.figure(figsize=(12, 6))

for player in [min_salary_name, max_salary_name]:
    plt.plot(df_pivot.index, df_pivot[player], marker='o', label=player)

plt.title('예측연봉 시계열 (2020-2023)')
plt.xlabel('연도')
plt.ylabel('예측연봉')
plt.legend()
plt.grid(True)

plt.show()

df_filtered_high = df[df['선수명'] == max_salary_name]
df_filtered_low = df[df['선수명'] == min_salary_name]

plt.figure(figsize=(14, 7))

plt.subplot(2, 2, 2)
plt.plot(df_filtered_high['연도'], df_filtered_high['WAR_x'], marker='o', color='mediumblue', label='WAR')
plt.title(f'{max_salary_name}의 WAR (2020-2023)')
plt.xlabel('연도')
plt.ylabel('WAR')
plt.legend()
plt.grid(True)
ax = plt.gca()
ax.set_xticks(df_filtered_low['연도'].unique())
ax.xaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: int(x)))

plt.subplot(2, 2, 1)
plt.plot(df_filtered_high['연도'], df_filtered_high['예측연봉'], marker='o', color='mediumblue', label='예측연봉')
plt.title(f'{max_salary_name}의 후년연봉 (2020-2023)')
plt.xlabel('연도')
plt.ylabel('후년연봉')
plt.legend()
plt.grid(True)
ax = plt.gca()
ax.set_xticks(df_filtered_low['연도'].unique())
ax.xaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: int(x)))

plt.subplot(2, 2, 4)
plt.plot(df_filtered_low['연도'], df_filtered_low['WAR_x'], marker='o', color='deeppink', label='WAR')
plt.title(f'{min_salary_name}의 WAR (2020-2023)')
plt.xlabel('연도')
plt.ylabel('WAR')
plt.legend()
plt.grid(True)
ax = plt.gca()
ax.set_xticks(df_filtered_low['연도'].unique())
ax.xaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: int(x)))

plt.subplot(2, 2, 3)
plt.plot(df_filtered_low['연도'], df_filtered_low['예측연봉'], marker='o', color='deeppink', label='예측연봉')
plt.title(f'{min_salary_name}의 후년연봉 (2020-2023)')
plt.xlabel('연도')
plt.ylabel('후년연봉')
plt.legend()
plt.grid(True)
ax = plt.gca()
ax.set_xticks(df_filtered_low['연도'].unique())
ax.xaxis.set_major_formatter(plt.FuncFormatter(lambda x, _: int(x)))

plt.tight_layout()
plt.show()

df_h = pd.read_csv('/content/hitter_salary_number.csv')

dfh_2023 = df_h[df_h['연도'] == 2023][['선수명', '후년연봉']]
dfh_2020 = df_h[df_h['연도'] == 2020][['선수명', '연봉(만원)']]

dfh_combined = pd.merge(dfh_2023, dfh_2020, on='선수명', how='inner', suffixes=('_2023', '_2020'))

dfh_combined['연봉_차이'] = dfh_combined['후년연봉'] - dfh_combined['연봉(만원)']

df_h = pd.merge(df_h, dfh_combined[['선수명', '연봉_차이']], on='선수명', how='left')

df_h.columns

min_salary_player_h = df_h.loc[df_h['연봉_차이'].idxmin()]
max_salary_player_h = df_h.loc[df_h['연봉_차이'].idxmax()]

min_salary_name_h = min_salary_player['선수명']
max_salary_name_h = max_salary_player['선수명']

dfh_filtered = df_h[df_h['선수명'].isin([min_salary_name_h, max_salary_name_h])]

dfh_pivot = dfh_filtered.pivot_table(index='연도', columns='선수명', values='후년연봉')

plt.figure(figsize=(12, 6))

for player in [min_salary_name_h, max_salary_name_h]:
    plt.plot(dfh_pivot.index, dfh_pivot[player], marker='o', label=player)

plt.title('예측연봉 시계열 (2020-2023)')
plt.xlabel('연도')
plt.ylabel('예측연봉')
plt.legend()
plt.grid(True)

plt.show()

